# -*- coding: utf-8 -*-
"""
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ TemDriver
–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ "–û–ø—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –¢–≠–ú-104 –Ω–∞ Python_ –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"
"""

from –£–ª—É—á—à–µ–Ω–Ω—ã–π_TemDriver import TemDriver, Tem104Protocol, Tem104MProtocol
import logging
import time
import json
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ============================================================================
# –ü–†–ò–ú–ï–† 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏
# ============================================================================

def example_1_simple_connection():
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–≤–µ—á–∞–µ—Ç."""
    
    print("=== –ü–†–ò–ú–ï–† 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ ===")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    PORT = 'COM3'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–æ—Ä—Ç
    DEVICE_ADDRESS = 1
    
    try:
        with TemDriver(port=PORT) as driver:
            if not driver.ser:
                print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É")
                return
            
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_name = driver.identify_device(DEVICE_ADDRESS)
            
            if device_name:
                print(f"‚úì –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ: {device_name}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                if 'M' in device_name:
                    print("  –¢–∏–ø: –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ (–¢–≠–ú-104–ú/104–ú-1)")
                else:
                    print("  –¢–∏–ø: –°—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏ (–¢–≠–ú-104/104-1)")
            else:
                print("‚úó –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")

# ============================================================================
# –ü–†–ò–ú–ï–† 2: –ü–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
# ============================================================================

def example_2_full_device_poll():
    """–ü–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —á—Ç–µ–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    print("=== –ü–†–ò–ú–ï–† 2: –ü–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ===")
    
    PORT = 'COM3'
    DEVICE_ADDRESS = 1
    
    try:
        with TemDriver(port=PORT) as driver:
            if not driver.ser:
                print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É")
                return
            
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            device_name = driver.identify_device(DEVICE_ADDRESS)
            if not device_name:
                print("‚úó –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            if 'M' in device_name:
                protocol = Tem104MProtocol(driver, DEVICE_ADDRESS)
                print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π")
            else:
                protocol = Tem104Protocol(driver, DEVICE_ADDRESS)
                print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π")
            
            # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            results = {}
            
            # 1. –í—Ä–µ–º—è
            dt = protocol.read_datetime()
            if dt:
                results['datetime'] = dt.strftime('%Y-%m-%d %H:%M:%S')
                print(f"‚úì –í—Ä–µ–º—è: {results['datetime']}")
            
            # 2. –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            current = protocol.read_current_values()
            if current:
                results['current'] = current
                print("‚úì –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                for key, value in current.items():
                    print(f"  {key}: {value}")
            
            # 3. –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏—Ç–æ–≥–∏
            totals = protocol.read_total_values()
            if totals:
                results['totals'] = totals
                print("‚úì –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∏—Ç–æ–≥–∏:")
                for key, value in totals.items():
                    print(f"  {key}: {value}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if results:
                filename = f"device_poll_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(results, f, ensure_ascii=False, indent=2)
                print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
                
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")

# ============================================================================
# –ü–†–ò–ú–ï–† 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
# ============================================================================

def example_3_real_time_monitoring():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
    
    print("=== –ü–†–ò–ú–ï–† 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ ===")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    PORT = 'COM3'
    DEVICE_ADDRESS = 1
    POLL_INTERVAL = 30  # —Å–µ–∫—É–Ω–¥—ã
    
    try:
        with TemDriver(port=PORT) as driver:
            if not driver.ser:
                print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É")
                return
            
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            device_name = driver.identify_device(DEVICE_ADDRESS)
            if not device_name:
                print("‚úó –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            if 'M' in device_name:
                protocol = Tem104MProtocol(driver, DEVICE_ADDRESS)
            else:
                protocol = Tem104Protocol(driver, DEVICE_ADDRESS)
            
            cycle = 0
            while True:
                cycle += 1
                print(f"\nüîÑ –¶–∏–∫–ª {cycle} - {datetime.now().strftime('%H:%M:%S')}")
                print("-" * 50)
                
                try:
                    # –ß—Ç–µ–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    current = protocol.read_current_values()
                    if current:
                        print(f"T1: {current.get('t1', 0):6.1f}¬∞C | "
                              f"T2: {current.get('t2', 0):6.1f}¬∞C | "
                              f"Flow: {current.get('flow1', 0):6.2f} –º¬≥/—á | "
                              f"Power: {current.get('power1', 0):6.3f} –∫–í—Ç")
                    else:
                        print("‚úó –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                        
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                
                print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {POLL_INTERVAL} —Å–µ–∫—É–Ω–¥...")
                time.sleep(POLL_INTERVAL)
                
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

# ============================================================================
# –ü–†–ò–ú–ï–† 4: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
# ============================================================================

def example_4_diagnostics():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."""
    
    print("=== –ü–†–ò–ú–ï–† 4: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    test_configs = [
        {"port": "COM3", "baudrate": 9600, "address": 1},
        {"port": "COM3", "baudrate": 19200, "address": 1},
        {"port": "COM3", "baudrate": 9600, "address": 2},
        {"port": "COM4", "baudrate": 9600, "address": 1},
    ]
    
    for i, config in enumerate(test_configs, 1):
        print(f"\nüîç –¢–µ—Å—Ç {i}: {config}")
        
        try:
            with TemDriver(port=config['port'], baudrate=config['baudrate']) as driver:
                if not driver.ser:
                    print("  ‚úó –ü–æ—Ä—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç")
                    continue
                
                # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                device_name = driver.identify_device(config['address'])
                if device_name:
                    print(f"  ‚úì –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ: {device_name}")
                    
                    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if 'M' in device_name:
                        protocol = Tem104MProtocol(driver, config['address'])
                    else:
                        protocol = Tem104Protocol(driver, config['address'])
                    
                    current = protocol.read_current_values()
                    if current:
                        print(f"  ‚úì –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã (T1: {current.get('t1', 0):.1f}¬∞C)")
                    else:
                        print("  ‚ö† –î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã")
                else:
                    print("  ‚úó –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")

# ============================================================================
# –ü–†–ò–ú–ï–† 5: –ú–∞—Å—Å–æ–≤—ã–π –æ–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤
# ============================================================================

def example_5_mass_polling():
    """–ú–∞—Å—Å–æ–≤—ã–π –æ–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    
    print("=== –ü–†–ò–ú–ï–† 5: –ú–∞—Å—Å–æ–≤—ã–π –æ–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ===")
    
    # –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞
    devices = [
        {"port": "COM3", "address": 1, "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 1"},
        {"port": "COM3", "address": 2, "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 2"},
        {"port": "COM4", "address": 1, "name": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 3"},
    ]
    
    results = []
    
    for device in devices:
        print(f"\nüì° –û–ø—Ä–æ—Å: {device['name']} (–ü–æ—Ä—Ç: {device['port']}, –ê–¥—Ä–µ—Å: {device['address']})")
        
        try:
            with TemDriver(port=device['port']) as driver:
                if not driver.ser:
                    print("  ‚úó –ü–æ—Ä—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç")
                    continue
                
                # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                device_name = driver.identify_device(device['address'])
                if not device_name:
                    print("  ‚úó –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    continue
                
                print(f"  ‚úì –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
                
                # –í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                if 'M' in device_name:
                    protocol = Tem104MProtocol(driver, device['address'])
                else:
                    protocol = Tem104Protocol(driver, device['address'])
                
                # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                current = protocol.read_current_values()
                totals = protocol.read_total_values()
                
                if current or totals:
                    result = {
                        "name": device['name'],
                        "port": device['port'],
                        "address": device['address'],
                        "device_type": device_name,
                        "status": "ONLINE",
                        "current": current,
                        "totals": totals,
                        "timestamp": datetime.now().isoformat()
                    }
                    results.append(result)
                    
                    print("  ‚úì –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
                    if current:
                        print(f"    T1: {current.get('t1', 0):.1f}¬∞C")
                        print(f"    T2: {current.get('t2', 0):.1f}¬∞C")
                    if totals:
                        print(f"    V1: {totals.get('V1_total', 0):.3f} –º¬≥")
                        print(f"    Q1: {totals.get('Q1_total', 0):.4f} –∫–í—Ç¬∑—á")
                else:
                    print("  ‚úó –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                    
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
            results.append({
                "name": device['name'],
                "port": device['port'],
                "address": device['address'],
                "status": "ERROR",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            })
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø—Ä–æ—Å–∞–º–∏
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print(f"\nüìã –°–í–û–î–ö–ê –û–ü–†–û–°–ê:")
    print("=" * 50)
    online_count = sum(1 for r in results if r['status'] == 'ONLINE')
    print(f"–í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
    print(f"–û–Ω–ª–∞–π–Ω: {online_count}")
    print(f"–û—à–∏–±–∫–∏: {len(devices) - online_count}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if results:
        filename = f"mass_poll_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    return results

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================================================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤."""
    
    print("üî• –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ú–ï–†–´ TEMDRIVER")
    print("=" * 50)
    
    examples = [
        ("1", "–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏", example_1_simple_connection),
        ("2", "–ü–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", example_2_full_device_poll),
        ("3", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", example_3_real_time_monitoring),
        ("4", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º", example_4_diagnostics),
        ("5", "–ú–∞—Å—Å–æ–≤—ã–π –æ–ø—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤", example_5_mass_polling),
    ]
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:")
        for num, name, func in examples:
            print(f"  {num} - {name}")
        print("  0 - –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == "0":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice in [num for num, _, _ in examples]:
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            for num, name, func in examples:
                if num == choice:
                    print(f"\nüöÄ –ó–∞–ø—É—Å–∫: {name}")
                    print("=" * 50)
                    try:
                        func()
                    except Exception as e:
                        print(f"‚úó –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
                    break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main() 